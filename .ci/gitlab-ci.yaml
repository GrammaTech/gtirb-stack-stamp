variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: clone
  FORMATTER_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/formatter'
  BUILD_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/build'

stages:
  - check-format
  - setup-apt-repo
  - test
  - test-windows
  - build
  - test_package
  - cleanup

.setup-apt-repo: &setup-apt-repo |
  echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list

.setup-packages: &setup-packages |
  python3 -m pip install dataclasses
  python3 -m pip install gtirb --extra-index-url https://__token__:$CI_JOB_TOKEN@git.grammatech.com/api/v4/projects/565/packages/pypi/simple
  python3 -m pip install gtirb-capstone --extra-index-url https://__token__:$CI_JOB_TOKEN@git.grammatech.com/api/v4/projects/1350/packages/pypi/simple
  python3 -m pip install gtirb-functions --extra-index-url https://__token__:$CI_JOB_TOKEN@git.grammatech.com/api/v4/projects/1349/packages/pypi/simple
  echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
  apt-get update -y && apt-get install -y --allow-unauthenticated gtirb-pprinter ddisasm


default:
  tags: ['kubernetes']
  image: $DOCKER_REGISTRY/$CI_PROJECT_PATH

check-format:
  stage: check-format
  script:
    - pre-commit run --all-files

setup-apt-repo:
  stage: setup-apt-repo
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cd apt-repo
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/master/download?job=debian-installer-ubuntu18 --output "gtirb-ubuntu18-artifacts.zip"
    - unzip gtirb-ubuntu18-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/master/download?job=debian-installer-ubuntu18 --output "gtirb-pprinter-ubuntu18-artifacts.zip"
    - unzip gtirb-pprinter-ubuntu18-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/ddisasm/-/jobs/artifacts/master/download?job=debian-installer-ubuntu18 --output "ddisasm-ubuntu18-artifacts.zip"
    - unzip ddisasm-ubuntu18-artifacts.zip
    - dpkg-scanpackages . /dev/null > Packages

test-python:
  stage: test
  needs: ['setup-apt-repo']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - tests/factorial
  script:
    - *setup-packages
    - python3 setup.py test

test-python-windows:
  stage: test-windows
  tags:
    - windows-gtirb-stack-stamp
  variables:
    GTIRB_BRANCH: master
    GTIRB_PPRINTER_BRANCH: master
    DDISASM_BRANCH: master
    GTIRB_CAPSTONE_BRANCH: master
    GTIRB_FUNCTIONS_BRANCH: master
  needs: ['test-python']
  script:
    # Install gtirb python API
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=python-wheel --output "gtirb-wheel.zip"
    - unzip gtirb-wheel.zip
    - python -m pip install pip --upgrade && python -m pip install gtirb-*-py*.whl
    # Install gtirb-pprinter
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=build-windows-msvc-relwithdebinfo --output "gtirb-pprinter-artifacts.zip"
    # Below, unzip doesn't work: the unzipped binary will not execute because
    # of a permissions error.  If you give it the correct permissions it just
    # silently fails on the command line.  This is happening because the zip
    # file is 'blocked'.  The powershell cmdlet Expand-Archive will unzip a
    # runnable, 'unblocked' binary.
    - powershell -Command '$global:ProgressPreference = "SilentlyContinue"; Expand-Archive gtirb-pprinter-artifacts.zip'
    - cp -r gtirb-pprinter-artifacts/gtirb_pprinter-*-win64 ./
    # Install ddisasm
    - curl -L https://git.grammatech.com/rewriting/ddisasm/-/jobs/artifacts/${DDISASM_BRANCH}/download?job=build-windows-msvc-relwithdebinfo --output "ddisasm-artifacts.zip"
    - powershell -Command '$global:ProgressPreference = "SilentlyContinue"; Expand-Archive ddisasm-artifacts.zip'
    - cp -r ddisasm-artifacts/DDISASM-*-win64 ./
    # Install gtirb helper libraries
    - curl -L https://git.grammatech.com/rewriting/gtirb-functions/-/jobs/artifacts/master/raw/dist/gtirb_functions-1.0.3-py3-none-any.whl?job=build --output gtirb_functions-1.0.3-py3-none-any.whl
    - curl -L https://git.grammatech.com/rewriting/gtirb-capstone/-/jobs/artifacts/master/raw/dist/gtirb_capstone-1.0.0-py3-none-any.whl?job=build --output gtirb_capstone-1.0.0-py3-none-any.whl
    - python -m pip install gtirb_capstone-1.0.0-py3-none-any.whl
    - python -m pip install gtirb_functions-1.0.3-py3-none-any.whl
    # Run the test
    - PATH="$PATH;$(cygpath -w $(pwd)/DDISASM-*-win64/bin);$(cygpath -w $(pwd)/gtirb_pprinter-*-win64/bin)" cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && python setup.py test"

test-common-lisp:
  stage: test
  needs: ['setup-apt-repo']
  script:
    - ln -s $(pwd) /root/quicklisp/local-projects/gtirb-stack-stamp
    - sbcl --eval '(ql:quickload :gtirb-stack-stamp)' --eval '(asdf:make :gtirb-stack-stamp :type :program :monolithic t)'
    - ./stack-stamp --help

test-cpp:
  stage: test
  needs: ['setup-apt-repo']
  script:
    - *setup-apt-repo
    - apt-get update -y && apt-get install -y libgtirb-dev ddisasm gtirb-pprinter
    - cmake ./ -Bbuild -DCMAKE_BUILD_TYPE=Debug
    - cd build
    - make -j8
    - cd ..
    - build/bin/test-gtirb-stack-stamp

build:
  stage: build
  needs: ['setup-apt-repo']
  artifacts:
    paths:
    - dist/gtirb_stack_stamp-?.?.?-py3-none-any.whl
    expire_in: 1 weeks
  script:
    - *setup-packages
    - python3 setup.py sdist bdist_wheel

test_package:
  variables:
    GIT_STRATEGY: none
  stage: test_package
  script:
    - *setup-packages
    - for f in dist/*.whl; do python3 -m pip install $f; done
