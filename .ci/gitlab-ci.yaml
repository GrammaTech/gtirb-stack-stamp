variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: fetch
  FORMATTER_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/formatter'
  BUILD_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/build'
  GTIRB_BRANCH: master

stages:
  - build-images
  - check-format
  - test
  - build
  - test_package
  - cleanup

build-images:
  # rules:
  #   only changes in .ci/Docker.formatter
  stage: build-images
  tags:
    - shell-exec
  script:
    # acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=python-wheel --output gtirb-python-wheel.zip
    # run docker
    - docker build -t $FORMATTER_IMAGE_NAME -f .ci/Dockerfile.formatter .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $FORMATTER_IMAGE_NAME
    - docker build -t $BUILD_IMAGE_NAME --no-cache -f .ci/Dockerfile.build .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $BUILD_IMAGE_NAME

check-format:
  stage: check-format
  tags:
    - docker-exec
  image: $FORMATTER_IMAGE_NAME
  script:
    - pre-commit run --all-files

test-python:
  stage: test
  tags:
    - docker-exec
  image: $BUILD_IMAGE_NAME
  script:
    - python3 setup.py test

test-common-lisp:
  stage: test
  tags:
    - docker-exec
  image: $BUILD_IMAGE_NAME
  script:
    - ln -s $(pwd) /root/quicklisp/local-projects/gtirb-stack-stamp
    - sbcl --eval '(ql:quickload :gtirb-stack-stamp)' --eval '(asdf:make :gtirb-stack-stamp :type :program :monolithic t)'
    - ./stack-stamp --help

build:
  stage: build
  tags:
    - docker-exec
  image: $BUILD_IMAGE_NAME
  artifacts:
    paths:
    - dist/gtirb_stack_stamp-?.?.?-py3-none-any.whl
    expire_in: 1 weeks
  script:
    - python3 setup.py sdist bdist_wheel

test_package:
  variables:
    GIT_STRATEGY: none
  stage: test_package
  tags:
    - docker-exec
  image: $BUILD_IMAGE_NAME
  script:
    - for f in dist/*.whl; do python3 -m pip install $f; done

# cleanup:
#   stage: cleanup
#   tags:
#     - shell-exec
#   script:
#     - export LOCAL_IMAGE_BASE=$(echo ${LOCAL_IMAGE_NAME} |  tr A-Z a-z)
#     - docker rmi -f ${LOCAL_IMAGE_BASE}
#   when: always
